" Vim
" ===

" Source ~/.vimrc.before if it exists
if filereadable(expand('~/.vimrc.before'))
  source ~/.vimrc.before
endif


" Per-directory .vimrc files
set exrc
set secure


" Pathogen Initialization
" =======================

" This loads all the plugins in ~/.vim/bundle
" Use tpope's pathogen plugin to manage all other plugins
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

source ~/.vim/colors.vim
call SetBackgroundForIterm()

" Syntax
" ======

syntax on
syntax enable
set t_Co=256

"  General
" =========

set nocompatible
let mapleader = '\'
set history=1000                              " lots of command line history
set viminfo='10,\"100,:20,%,n~/.viminfo       " remember certain things when we exit
set autoread                                  " reload files changed outside of Vim
set autowrite
set nrformats=                                " improves incrementing when there are leading 0's.
cmap w!! w !sudo tee % >/dev/null             " sudo & write, if you forget to sudo first

"  UI
" =========

set ruler                             " show the cursor position all the time
set backspace=start,indent,eol        " allow backspacing over anything in insert mode
set wm=2                              " wrap margin on the right
set scrolloff=2                       " keep some context when scrolling
set nowrap                            " do not wrap lines
set antialias                         " of course
set guifont=source\ code\ pro:h14

"  Visual cues
" =========

set laststatus=2                " always show the status line
set visualbell                  " quiet
set noerrorbells                " quiet
set number                      " show line numbers
set showcmd                     " show size of visual selection
syntax enable

"  Tabs
" =========

set autoindent
set smartindent
set shiftwidth=2
set softtabstop=2
set expandtab
set tabstop=4

"  Wrapping
" =========

set linebreak              " wrapping preserves words.
" toggle word wrap
nnoremap <leader>w :set wrap! wrap?<cr>
" Set default wrapping based on file type
autocmd FileType markdown setlocal wrap linebreak nolist

"  Backups
" =========

set nobackup                           " do not keep backups after close
set nowritebackup                      " do not keep a backup while working
set noswapfile                         " don't keep swp files either
set backupdir=~/.vim/backups           " store backups under ~/.vim/backup
set backupcopy=yes                     " keep attributes of original file
set backupskip=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*
set directory=~/.vim/tmp               " where to keep swp files

"  Searching
" =========

set incsearch               " Find the next match as we type the search
set hlsearch                " Hilight searches by default
set viminfo='100,f1         " Save up to 100 marks, enable capital marks
set ignorecase              " make searches case insensitive
set smartcase               " care about case sensitivity if there's a capital letter
set incsearch               " do incremental searching

" Clear last search
nnoremap <space> :set hlsearch! hlsearch?<CR>

" Scrolling
" =========

" Start scrolling when we're getting close to margins
set scrolloff=10
set sidescrolloff=15
set sidescroll=1


" Ag mappings
nmap <leader>a :Ag<space>

" ---------------------------------------------------------------------------
"  Navigation
" ---------------------------------------------------------------------------
" Navigate wrapped lines with cmd+[jk460]
vmap <D-j> gj
vmap <D-k> gk
vmap <D-4> g$
vmap <D-6> g^
vmap <D-0> g^
nmap <D-j> gj
nmap <D-k> gk
nmap <D-4> g$
nmap <D-6> g^

" Navigate between windows
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l

" move window split position
nnoremap <C-W>H <C-A-H>
nnoremap <C-W>J <C-A-J>
nnoremap <C-W>K <C-A-K>
nnoremap <C-W>L <C-A-L>

" ----------------------------------------------------------------------------
"  NerdTree config
" ----------------------------------------------------------------------------
let NERDTreeWinSize=31                " how wide nerdtree ought to be
let NERDTreeMinimalUI=1               " don't need to the noise
let NERDTreeDirArrows=1               " prettier arrows
let g:NERDTreeMapOpenSplit  = 's'
let g:NERDTreeMapOpenVSplit = 'v'

" show/hide nerdtree
nnoremap <leader>d :NERDTreeToggle<CR>

" highlight the current buffer in the nerdtree
nnoremap <leader>D :NERDTreeFind<CR>

" ---------------------------------------------------------------------------
"  Netrw
" ---------------------------------------------------------------------------
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'      " hide dot files
nnoremap <leader>e :execute 'e .'<CR>
nnoremap <leader>E :execute 'E'<CR>
"nnoremap <leader><leader>e :vsp .<CR>
"nnoremap <leader><leader>E :Ve<CR>

" ---------------------------------------------------------------------------
" Coffeescript
" ---------------------------------------------------------------------------

vmap <leader>C <esc>:'<,'>:CoffeeCompile<CR>
map <leader>C :CoffeeCompile<CR>


" ---------------------------------------------------------------------------
" Misc Mappings
" ---------------------------------------------------------------------------

" Completion
" ==========

"set wildmode=list:longest
set wildmode=longest,list,full
set wildmenu                    " Enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~     " Stuff to ignore when tab completing
set wildignore+=*vim/backups*


" Mouse
" ======

" Send more characters for redraws
set ttyfast

" Enable mouse use in all modes
set mouse=a

" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
set ttymouse=xterm2


" Folds
" =====

set nofoldenable         " Kill folding

" Turn off folding
nnoremap <leader>z :set nofoldenable! nofoldenable?<cr>

"set foldmethod=indent   " Fold based on indent
"set foldnestmax=3       " Deepest fold is 3 levels
"set nofoldenable        " Don't fold by default

" Shortcut to make splits
nnoremap <leader>s :sp<cr><C-w>j
nnoremap <leader>v :vsp<cr><C-w>l
nnoremap <leader>t :tabnew<CR>

" Move line up or down
nnoremap <D-J> ddp==
nnoremap <D-K> ddkkp==

" Allow multiple pastes of the same content when pasting in visual mode.
vnoremap p pgvy

" Yank to end of line
nnoremap Y y$

" Emacs bindings in command line mode
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Delete the line below/above the current cursor position
nnoremap do jddk^
nnoremap dO kdd^

" Easier to get to the end of the line
noremap L g_

" Easier to get to the first non-blank character of the line
noremap H ^

" Switch between the last 2 files
nnoremap go <c-^>

" Toggle spell check
nnoremap <leader>p :set spell! spell?<cr>
set spelllang=en_us

" Strip trailing whitespace
nnoremap <leader><space> :%s/\s\+$//e<CR>

" Edit vimrc
nmap <leader><leader>v :sp ~/.dotfiles/vim/vimrc.symlink<CR><C-W>_
nmap <leader><leader>V :source ~/.dotfiles/vim/vimrc.symlink<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
" Edit Gemfile
"nnoremap <leader><leader>g :e Gemfile<cr>

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Resize windows
nmap <M-C-Left> <C-W><<C-W><
nmap <M-C-Right> <C-W>><C-W>>
nmap <M-C-Up> <C-W>+<C-W>+
nmap <M-C-Down> <C-W>-<C-W>-

" Substitution
nmap <leader>r :%s/<C-r><C-w>/
vmap <leader>r "ry:%s/<C-r>r/

" Show trailing whitespace with ,4
set listchars=tab:>-,trail:Â·,eol:$
nmap <silent> <leader>4 :set nolist!<CR>

" Scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Set options if a gui is running
if has("gui_running")
  set guioptions+=TlRLrb
  set guioptions-=TlRLrb
endif

" Turn Off Swap Files
" ===================

set noswapfile
set nobackup
set nowritebackup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Persistent Undo
" ===============

" Keep undo history across sessions, by storing in file
" Only works in MacVim (gui) mode
if has('gui_running')
  set undodir=~/.vim/backups
  set undofile
  " Hide the toolbar
  set guioptions-=T
endif

"  Buffers
" ===========

" Restore cursor position
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

set hidden                                    " Let me leave buffers even when they're changed.

"  Recognize files with no extensions
" ===========
filetype plugin indent on
set filetype=idl
autocmd BufRead,BufNewFile Gemfile set filetype=ruby
autocmd BufRead,BufNewFile Guardfile set filetype=ruby
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile *.jst set filetype=html
autocmd BufRead,BufNewFile *.handlebars set filetype=html



" Status Line
" ===========

"set statusline=
"set statusline+=%-3.3n\                      " buffer number
"set statusline+=%f\                          " filename
"set statusline+=%h%m%r%w                     " status flags
"set statusline+=\[%{strlen(&ft)?&ft:'none'}] " file type
"set statusline+=%=                           " right align remainder
"set statusline+=%-14(%l,%c%V%)               " line, character
"set statusline+=%<%P                         " file position
"set statusline=

set statusline=                                 " Override default
"set statusline+=%{fugitive#statusline()[4:-2]}  " Show fugitive git info
set statusline+=\ %f\ %m\ %r                    " Show filename/path
set statusline+=%=                              " Set right-side status info after this line
set statusline+=%l/%L:%v                        " Set <line number>/<total lines>:<column>
set statusline+=\                               " Set ending space

" Plugin overrides
"source ~/.vim/autocmd.vim
source ~/.vim/format.vim
"source ~/.vim/common.vim
source ~/.vim/plugin/settings/command-t.vim
"source ~/.vim/plugin/settings/unite.vim
